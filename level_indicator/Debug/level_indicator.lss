
level_indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803e00  00000d40  00000dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00803e02  00803e02  00000dd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002273  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018b2  00000000  00000000  00003117  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000627  00000000  00000000  000049c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00004ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001393  00000000  00000000  00005144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a9  00000000  00000000  000064d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00006980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e0 e4       	ldi	r30, 0x40	; 64
  48:	fd e0       	ldi	r31, 0x0D	; 13
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 32       	cpi	r26, 0x27	; 39
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	3b d3       	rcall	.+1654   	; 0x6de <main>
  68:	69 c6       	rjmp	.+3282   	; 0xd3c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_Z7WS_sendPhhh>:
 * The port is determined by the macro WS2811_PORT, but the actual pin to
 * be used is an argument to this function. This allows a single instance of this function
 * to control up to 8 separate channels.
 */
void WS_send(uint8_t *values, uint8_t number, uint8_t bit)
{
  6c:	fc 01       	movw	r30, r24
    
    const uint8_t mask =_BV(bit);
  6e:	21 e0       	ldi	r18, 0x01	; 1
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <_Z7WS_sendPhhh+0xc>
  74:	22 0f       	add	r18, r18
  76:	33 1f       	adc	r19, r19
  78:	4a 95       	dec	r20
  7a:	e2 f7       	brpl	.-8      	; 0x74 <_Z7WS_sendPhhh+0x8>
    uint8_t low_val = WS2811_PORT & (~mask);
  7c:	91 b1       	in	r25, 0x01	; 1
  7e:	82 2f       	mov	r24, r18
  80:	80 95       	com	r24
  82:	98 23       	and	r25, r24
    uint8_t high_val = WS2811_PORT | mask;
  84:	81 b1       	in	r24, 0x01	; 1
    uint16_t size = (uint16_t)(number * 3); // size in bytes (WS * 3 = total LEDs)

    // reset the controllers by pulling the data line low
    uint8_t bitcount = 7;
    WS2811_PORT = low_val;
  86:	91 b9       	out	0x01, r25	; 1
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  88:	36 ed       	ldi	r19, 0xD6	; 214
  8a:	3a 95       	dec	r19
  8c:	f1 f7       	brne	.-4      	; 0x8a <__EEPROM_REGION_LENGTH__+0xa>
    [upreg]   "r" (high_val),	// register that contains the "up" value for the output port (constant)
    [downreg] "r" (low_val),	// register that contains the "down" value for the output port (constant)
    [bytes]   "w" (size),		// number of bytes to send
    [bits]    "d" (bitcount),       // number of bits/2
    [portout] "I" (_SFR_IO_ADDR(WS2811_PORT)) // The port to use
    );
  8e:	28 2b       	or	r18, r24
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	ab 01       	movw	r20, r22
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	da 01       	movw	r26, r20
  9a:	a6 0f       	add	r26, r22
  9c:	b7 1f       	adc	r27, r23
  9e:	87 e0       	ldi	r24, 0x07	; 7

000000a0 <start>:
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	01 90       	ld	r0, Z+

000000a4 <cont06>:
	...

000000a6 <cont07>:
  a6:	00 00       	nop
  a8:	91 b9       	out	0x01, r25	; 1

000000aa <cont09>:
  aa:	00 0c       	add	r0, r0

000000ac <s00>:
  ac:	21 b9       	out	0x01, r18	; 1
  ae:	08 f0       	brcs	.+2      	; 0xb2 <skip03>
  b0:	91 b9       	out	0x01, r25	; 1

000000b2 <skip03>:
  b2:	81 50       	subi	r24, 0x01	; 1
  b4:	b9 f7       	brne	.-18     	; 0xa4 <cont06>
  b6:	00 0c       	add	r0, r0
  b8:	40 f4       	brcc	.+16     	; 0xca <Lx008>
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	91 b9       	out	0x01, r25	; 1
  be:	00 00       	nop
  c0:	21 b9       	out	0x01, r18	; 1
  c2:	11 97       	sbiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	79 f7       	brne	.-34     	; 0xa6 <cont07>
  c8:	08 c0       	rjmp	.+16     	; 0xda <brk18>

000000ca <Lx008>:
  ca:	91 b9       	out	0x01, r25	; 1
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	21 b9       	out	0x01, r18	; 1
  d0:	00 00       	nop
  d2:	91 b9       	out	0x01, r25	; 1
  d4:	11 97       	sbiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	41 f7       	brne	.-48     	; 0xaa <cont09>

000000da <brk18>:
  da:	91 b9       	out	0x01, r25	; 1
  dc:	08 95       	ret

000000de <_Z14cpu_clock_initv>:
//============================================================================================
//setup the CPU
void cpu_clock_init()
{
	//set the clock multiplier to 2, with the clock fuse set to 16MHz to give 8MHz
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	88 ed       	ldi	r24, 0xD8	; 216
  e4:	84 bf       	out	0x34, r24	; 52
  e6:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  ea:	08 95       	ret

000000ec <_Z8init_ADCv>:
//Setup ADC
void init_ADC()
{
	//TINY - setup ADC
	//VREF - setup voltage reference to 4.3V
	VREF.CTRLA = VREF_ADC0REFSEL_4V34_gc;
  ec:	e0 ea       	ldi	r30, 0xA0	; 160
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 e3       	ldi	r24, 0x30	; 48
  f2:	80 83       	st	Z, r24
	//VREF - enable ADC ref
	VREF.CTRLB |= VREF_ADC0REFEN_bm;
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select resolution 10bit
	ADC0.CTRLA = ADC_RESSEL_10BIT_gc;
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	10 82       	st	Z, r1
	//ADC - number of convertions accumulated per measurement
	ADC0.CTRLB = ADC_SAMPNUM_ACC8_gc;
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select reference
	ADC0.CTRLC = ADC_REFSEL_INTREF_gc;
 104:	12 82       	std	Z+2, r1	; 0x02
	//ADC - sampling rate pre-scaler ~1.25MHz
	ADC0.CTRLC = ADC_PRESC_DIV16_gc;
 106:	82 83       	std	Z+2, r24	; 0x02
	//ADC - initial input PA3 / AIN3
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
 108:	86 83       	std	Z+6, r24	; 0x06
	//ADC - enable start event (start measuring on enable)
	ADC0.EVCTRL |= ADC_STARTEI_bm;
 10a:	81 85       	ldd	r24, Z+9	; 0x09
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	81 87       	std	Z+9, r24	; 0x09
	//ADC - enable ADC (ready for measurement trigger)
	ADC0.CTRLA |= ADC_ENABLE_bm;
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <_Z9init_pinsv>:

//setup ports
void init_pins()
{
	//sensor
	pressure_sensor_port.DIRCLR = pressure_sensor_mask;
 118:	e0 e0       	ldi	r30, 0x00	; 0
 11a:	f4 e0       	ldi	r31, 0x04	; 4
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	82 83       	std	Z+2, r24	; 0x02

	//adjust pot
	low_level_pot_port.DIRCLR = low_level_pot_mask;
 120:	a0 e2       	ldi	r26, 0x20	; 32
 122:	b4 e0       	ldi	r27, 0x04	; 4
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	12 96       	adiw	r26, 0x02	; 2
 128:	8c 93       	st	X, r24
 12a:	12 97       	sbiw	r26, 0x02	; 2
	high_level_pot_port.DIRCLR = high_level_pot_mask;
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	12 96       	adiw	r26, 0x02	; 2
 130:	9c 93       	st	X, r25
	
	//set LED pin
	led_port.DIRSET = led_mask;
 132:	81 83       	std	Z+1, r24	; 0x01
 134:	08 95       	ret

00000136 <_Z4sendv>:


//send data to LEDs
void send()
{
	WS_send(&(leds[0].g), no_leds, ws_pin);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	66 e0       	ldi	r22, 0x06	; 6
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	9e e3       	ldi	r25, 0x3E	; 62
 13e:	96 df       	rcall	.-212    	; 0x6c <_Z7WS_sendPhhh>
 140:	08 95       	ret

00000142 <_Z7get_adch>:

//read ADC value
uint16_t get_adc(uint8_t sel_pin)
{
	//wait for current measurement to finish
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
 142:	e0 e0       	ldi	r30, 0x00	; 0
 144:	f6 e0       	ldi	r31, 0x06	; 6
 146:	90 85       	ldd	r25, Z+8	; 0x08
 148:	90 fd       	sbrc	r25, 0
 14a:	fd cf       	rjmp	.-6      	; 0x146 <_Z7get_adch+0x4>
	//select input
	ADC0.MUXPOS = sel_pin;
 14c:	e0 e0       	ldi	r30, 0x00	; 0
 14e:	f6 e0       	ldi	r31, 0x06	; 6
 150:	86 83       	std	Z+6, r24	; 0x06
	//trigger reading
	ADC0.COMMAND |= ADC_STCONV_bm;
 152:	80 85       	ldd	r24, Z+8	; 0x08
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 87       	std	Z+8, r24	; 0x08
	//wait while reading taken
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
 158:	80 85       	ldd	r24, Z+8	; 0x08
 15a:	80 fd       	sbrc	r24, 0
 15c:	fd cf       	rjmp	.-6      	; 0x158 <_Z7get_adch+0x16>
	//process result
	uint16_t result = (ADC0.RES/8); //divide by number of samples accumulated
 15e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 162:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	return result;
}
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	08 95       	ret

00000174 <_Z15convert_hsl_rgbfff>:


//convert HSL to RGB
void convert_hsl_rgb(float hue, float saturation, float lightness)
{	
 174:	4f 92       	push	r4
 176:	5f 92       	push	r5
 178:	6f 92       	push	r6
 17a:	7f 92       	push	r7
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <_Z15convert_hsl_rgbfff+0x22>
 196:	00 d0       	rcall	.+0      	; 0x198 <_Z15convert_hsl_rgbfff+0x24>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	4b 01       	movw	r8, r22
 19e:	5c 01       	movw	r10, r24
 1a0:	29 01       	movw	r4, r18
 1a2:	3a 01       	movw	r6, r20
 1a4:	e9 82       	std	Y+1, r14	; 0x01
 1a6:	fa 82       	std	Y+2, r15	; 0x02
 1a8:	0b 83       	std	Y+3, r16	; 0x03
 1aa:	1c 83       	std	Y+4, r17	; 0x04
	//calculate chroma
	float c = (1 - fabs(2 * lightness - 1)) * saturation;
 1ac:	a8 01       	movw	r20, r16
 1ae:	97 01       	movw	r18, r14
 1b0:	c8 01       	movw	r24, r16
 1b2:	b7 01       	movw	r22, r14
 1b4:	1a d3       	rcall	.+1588   	; 0x7ea <__addsf3>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e8       	ldi	r20, 0x80	; 128
 1bc:	5f e3       	ldi	r21, 0x3F	; 63
 1be:	14 d3       	rcall	.+1576   	; 0x7e8 <__subsf3>
 1c0:	9b 01       	movw	r18, r22
 1c2:	ac 01       	movw	r20, r24
 1c4:	5f 77       	andi	r21, 0x7F	; 127
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	9f e3       	ldi	r25, 0x3F	; 63
 1ce:	0c d3       	rcall	.+1560   	; 0x7e8 <__subsf3>
 1d0:	a3 01       	movw	r20, r6
 1d2:	92 01       	movw	r18, r4
 1d4:	35 d5       	rcall	.+2666   	; 0xc40 <__mulsf3>
 1d6:	6b 01       	movw	r12, r22
 1d8:	7c 01       	movw	r14, r24
	//
	float x = c * (1.0 - fabs(fmod(hue / 60.0, 2) - 1.0));
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e7       	ldi	r20, 0x70	; 112
 1e0:	52 e4       	ldi	r21, 0x42	; 66
 1e2:	c5 01       	movw	r24, r10
 1e4:	b4 01       	movw	r22, r8
 1e6:	72 d3       	rcall	.+1764   	; 0x8cc <__divsf3>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e4       	ldi	r21, 0x40	; 64
 1f0:	56 d4       	rcall	.+2220   	; 0xa9e <fmod>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e8       	ldi	r20, 0x80	; 128
 1f8:	5f e3       	ldi	r21, 0x3F	; 63
 1fa:	f6 d2       	rcall	.+1516   	; 0x7e8 <__subsf3>
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	5f 77       	andi	r21, 0x7F	; 127
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	9f e3       	ldi	r25, 0x3F	; 63
 20a:	ee d2       	rcall	.+1500   	; 0x7e8 <__subsf3>
 20c:	a7 01       	movw	r20, r14
 20e:	96 01       	movw	r18, r12
 210:	17 d5       	rcall	.+2606   	; 0xc40 <__mulsf3>
 212:	2b 01       	movw	r4, r22
 214:	3c 01       	movw	r6, r24

	//find appropriate hue and chroma point
	if ((hue >= 0) && (hue < 60))	
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	a9 01       	movw	r20, r18
 21c:	c5 01       	movw	r24, r10
 21e:	b4 01       	movw	r22, r8
 220:	0a d5       	rcall	.+2580   	; 0xc36 <__gesf2>
 222:	88 23       	and	r24, r24
 224:	0c f1       	brlt	.+66     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e7       	ldi	r20, 0x70	; 112
 22c:	52 e4       	ldi	r21, 0x42	; 66
 22e:	c5 01       	movw	r24, r10
 230:	b4 01       	movw	r22, r8
 232:	47 d3       	rcall	.+1678   	; 0x8c2 <__cmpsf2>
 234:	88 23       	and	r24, r24
 236:	c4 f4       	brge	.+48     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
	{	temp_r = c;
 238:	c0 92 0a 3e 	sts	0x3E0A, r12	; 0x803e0a <temp_r>
 23c:	d0 92 0b 3e 	sts	0x3E0B, r13	; 0x803e0b <temp_r+0x1>
 240:	e0 92 0c 3e 	sts	0x3E0C, r14	; 0x803e0c <temp_r+0x2>
 244:	f0 92 0d 3e 	sts	0x3E0D, r15	; 0x803e0d <temp_r+0x3>
		temp_g = x;
 248:	40 92 06 3e 	sts	0x3E06, r4	; 0x803e06 <temp_g>
 24c:	50 92 07 3e 	sts	0x3E07, r5	; 0x803e07 <temp_g+0x1>
 250:	60 92 08 3e 	sts	0x3E08, r6	; 0x803e08 <temp_g+0x2>
 254:	70 92 09 3e 	sts	0x3E09, r7	; 0x803e09 <temp_g+0x3>
		temp_b = 0;
 258:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <__data_end>
 25c:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <__data_end+0x1>
 260:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <__data_end+0x2>
 264:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <__data_end+0x3>
	}
	if ((hue >= 60) && (hue < 120))
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	40 e7       	ldi	r20, 0x70	; 112
 26e:	52 e4       	ldi	r21, 0x42	; 66
 270:	c5 01       	movw	r24, r10
 272:	b4 01       	movw	r22, r8
 274:	e0 d4       	rcall	.+2496   	; 0xc36 <__gesf2>
 276:	88 23       	and	r24, r24
 278:	0c f1       	brlt	.+66     	; 0x2bc <__DATA_REGION_LENGTH__+0xbc>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 ef       	ldi	r20, 0xF0	; 240
 280:	52 e4       	ldi	r21, 0x42	; 66
 282:	c5 01       	movw	r24, r10
 284:	b4 01       	movw	r22, r8
 286:	1d d3       	rcall	.+1594   	; 0x8c2 <__cmpsf2>
 288:	88 23       	and	r24, r24
 28a:	c4 f4       	brge	.+48     	; 0x2bc <__DATA_REGION_LENGTH__+0xbc>
	{	temp_r = x;
 28c:	40 92 0a 3e 	sts	0x3E0A, r4	; 0x803e0a <temp_r>
 290:	50 92 0b 3e 	sts	0x3E0B, r5	; 0x803e0b <temp_r+0x1>
 294:	60 92 0c 3e 	sts	0x3E0C, r6	; 0x803e0c <temp_r+0x2>
 298:	70 92 0d 3e 	sts	0x3E0D, r7	; 0x803e0d <temp_r+0x3>
		temp_g = c;
 29c:	c0 92 06 3e 	sts	0x3E06, r12	; 0x803e06 <temp_g>
 2a0:	d0 92 07 3e 	sts	0x3E07, r13	; 0x803e07 <temp_g+0x1>
 2a4:	e0 92 08 3e 	sts	0x3E08, r14	; 0x803e08 <temp_g+0x2>
 2a8:	f0 92 09 3e 	sts	0x3E09, r15	; 0x803e09 <temp_g+0x3>
		temp_b = 0;
 2ac:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <__data_end>
 2b0:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <__data_end+0x1>
 2b4:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <__data_end+0x2>
 2b8:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <__data_end+0x3>
	}
	if ((hue >= 120) && (hue < 180))
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 ef       	ldi	r20, 0xF0	; 240
 2c2:	52 e4       	ldi	r21, 0x42	; 66
 2c4:	c5 01       	movw	r24, r10
 2c6:	b4 01       	movw	r22, r8
 2c8:	b6 d4       	rcall	.+2412   	; 0xc36 <__gesf2>
 2ca:	88 23       	and	r24, r24
 2cc:	0c f1       	brlt	.+66     	; 0x310 <__DATA_REGION_LENGTH__+0x110>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	44 e3       	ldi	r20, 0x34	; 52
 2d4:	53 e4       	ldi	r21, 0x43	; 67
 2d6:	c5 01       	movw	r24, r10
 2d8:	b4 01       	movw	r22, r8
 2da:	f3 d2       	rcall	.+1510   	; 0x8c2 <__cmpsf2>
 2dc:	88 23       	and	r24, r24
 2de:	c4 f4       	brge	.+48     	; 0x310 <__DATA_REGION_LENGTH__+0x110>
	{	temp_r = 0;
 2e0:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <temp_r>
 2e4:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <temp_r+0x1>
 2e8:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <temp_r+0x2>
 2ec:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <temp_r+0x3>
		temp_g = c;
 2f0:	c0 92 06 3e 	sts	0x3E06, r12	; 0x803e06 <temp_g>
 2f4:	d0 92 07 3e 	sts	0x3E07, r13	; 0x803e07 <temp_g+0x1>
 2f8:	e0 92 08 3e 	sts	0x3E08, r14	; 0x803e08 <temp_g+0x2>
 2fc:	f0 92 09 3e 	sts	0x3E09, r15	; 0x803e09 <temp_g+0x3>
		temp_b = x;
 300:	40 92 02 3e 	sts	0x3E02, r4	; 0x803e02 <__data_end>
 304:	50 92 03 3e 	sts	0x3E03, r5	; 0x803e03 <__data_end+0x1>
 308:	60 92 04 3e 	sts	0x3E04, r6	; 0x803e04 <__data_end+0x2>
 30c:	70 92 05 3e 	sts	0x3E05, r7	; 0x803e05 <__data_end+0x3>
	}
	if ((hue >= 180) && (hue < 240))
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	44 e3       	ldi	r20, 0x34	; 52
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	c5 01       	movw	r24, r10
 31a:	b4 01       	movw	r22, r8
 31c:	8c d4       	rcall	.+2328   	; 0xc36 <__gesf2>
 31e:	88 23       	and	r24, r24
 320:	0c f1       	brlt	.+66     	; 0x364 <__DATA_REGION_LENGTH__+0x164>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e7       	ldi	r20, 0x70	; 112
 328:	53 e4       	ldi	r21, 0x43	; 67
 32a:	c5 01       	movw	r24, r10
 32c:	b4 01       	movw	r22, r8
 32e:	c9 d2       	rcall	.+1426   	; 0x8c2 <__cmpsf2>
 330:	88 23       	and	r24, r24
 332:	c4 f4       	brge	.+48     	; 0x364 <__DATA_REGION_LENGTH__+0x164>
	{	temp_r = 0;
 334:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <temp_r>
 338:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <temp_r+0x1>
 33c:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <temp_r+0x2>
 340:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <temp_r+0x3>
		temp_g = x;
 344:	40 92 06 3e 	sts	0x3E06, r4	; 0x803e06 <temp_g>
 348:	50 92 07 3e 	sts	0x3E07, r5	; 0x803e07 <temp_g+0x1>
 34c:	60 92 08 3e 	sts	0x3E08, r6	; 0x803e08 <temp_g+0x2>
 350:	70 92 09 3e 	sts	0x3E09, r7	; 0x803e09 <temp_g+0x3>
		temp_b = c;
 354:	c0 92 02 3e 	sts	0x3E02, r12	; 0x803e02 <__data_end>
 358:	d0 92 03 3e 	sts	0x3E03, r13	; 0x803e03 <__data_end+0x1>
 35c:	e0 92 04 3e 	sts	0x3E04, r14	; 0x803e04 <__data_end+0x2>
 360:	f0 92 05 3e 	sts	0x3E05, r15	; 0x803e05 <__data_end+0x3>
	}
	if ((hue >= 240) && (hue < 300))
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	40 e7       	ldi	r20, 0x70	; 112
 36a:	53 e4       	ldi	r21, 0x43	; 67
 36c:	c5 01       	movw	r24, r10
 36e:	b4 01       	movw	r22, r8
 370:	62 d4       	rcall	.+2244   	; 0xc36 <__gesf2>
 372:	88 23       	and	r24, r24
 374:	0c f1       	brlt	.+66     	; 0x3b8 <__DATA_REGION_LENGTH__+0x1b8>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	46 e9       	ldi	r20, 0x96	; 150
 37c:	53 e4       	ldi	r21, 0x43	; 67
 37e:	c5 01       	movw	r24, r10
 380:	b4 01       	movw	r22, r8
 382:	9f d2       	rcall	.+1342   	; 0x8c2 <__cmpsf2>
 384:	88 23       	and	r24, r24
 386:	c4 f4       	brge	.+48     	; 0x3b8 <__DATA_REGION_LENGTH__+0x1b8>
	{	temp_r = x;
 388:	40 92 0a 3e 	sts	0x3E0A, r4	; 0x803e0a <temp_r>
 38c:	50 92 0b 3e 	sts	0x3E0B, r5	; 0x803e0b <temp_r+0x1>
 390:	60 92 0c 3e 	sts	0x3E0C, r6	; 0x803e0c <temp_r+0x2>
 394:	70 92 0d 3e 	sts	0x3E0D, r7	; 0x803e0d <temp_r+0x3>
		temp_g = 0;
 398:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <temp_g>
 39c:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <temp_g+0x1>
 3a0:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <temp_g+0x2>
 3a4:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <temp_g+0x3>
		temp_b = c;
 3a8:	c0 92 02 3e 	sts	0x3E02, r12	; 0x803e02 <__data_end>
 3ac:	d0 92 03 3e 	sts	0x3E03, r13	; 0x803e03 <__data_end+0x1>
 3b0:	e0 92 04 3e 	sts	0x3E04, r14	; 0x803e04 <__data_end+0x2>
 3b4:	f0 92 05 3e 	sts	0x3E05, r15	; 0x803e05 <__data_end+0x3>
	}
	if ((hue >= 300) && (hue < 360))
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	46 e9       	ldi	r20, 0x96	; 150
 3be:	53 e4       	ldi	r21, 0x43	; 67
 3c0:	c5 01       	movw	r24, r10
 3c2:	b4 01       	movw	r22, r8
 3c4:	38 d4       	rcall	.+2160   	; 0xc36 <__gesf2>
 3c6:	88 23       	and	r24, r24
 3c8:	0c f1       	brlt	.+66     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	44 eb       	ldi	r20, 0xB4	; 180
 3d0:	53 e4       	ldi	r21, 0x43	; 67
 3d2:	c5 01       	movw	r24, r10
 3d4:	b4 01       	movw	r22, r8
 3d6:	75 d2       	rcall	.+1258   	; 0x8c2 <__cmpsf2>
 3d8:	88 23       	and	r24, r24
 3da:	c4 f4       	brge	.+48     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{	temp_r = c;
 3dc:	c0 92 0a 3e 	sts	0x3E0A, r12	; 0x803e0a <temp_r>
 3e0:	d0 92 0b 3e 	sts	0x3E0B, r13	; 0x803e0b <temp_r+0x1>
 3e4:	e0 92 0c 3e 	sts	0x3E0C, r14	; 0x803e0c <temp_r+0x2>
 3e8:	f0 92 0d 3e 	sts	0x3E0D, r15	; 0x803e0d <temp_r+0x3>
		temp_g = 0;
 3ec:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <temp_g>
 3f0:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <temp_g+0x1>
 3f4:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <temp_g+0x2>
 3f8:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <temp_g+0x3>
		temp_b = x;
 3fc:	40 92 02 3e 	sts	0x3E02, r4	; 0x803e02 <__data_end>
 400:	50 92 03 3e 	sts	0x3E03, r5	; 0x803e03 <__data_end+0x1>
 404:	60 92 04 3e 	sts	0x3E04, r6	; 0x803e04 <__data_end+0x2>
 408:	70 92 05 3e 	sts	0x3E05, r7	; 0x803e05 <__data_end+0x3>
	}

	//find rgb by adding same amount to each component to match lightness
	float m = lightness - (c / 2);
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	5f e3       	ldi	r21, 0x3F	; 63
 414:	c7 01       	movw	r24, r14
 416:	b6 01       	movw	r22, r12
 418:	13 d4       	rcall	.+2086   	; 0xc40 <__mulsf3>
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	69 81       	ldd	r22, Y+1	; 0x01
 420:	7a 81       	ldd	r23, Y+2	; 0x02
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	9c 81       	ldd	r25, Y+4	; 0x04
 426:	e0 d1       	rcall	.+960    	; 0x7e8 <__subsf3>
 428:	6b 01       	movw	r12, r22
 42a:	7c 01       	movw	r14, r24

	temp_r = (temp_r + m) * 255;
 42c:	20 91 0a 3e 	lds	r18, 0x3E0A	; 0x803e0a <temp_r>
 430:	30 91 0b 3e 	lds	r19, 0x3E0B	; 0x803e0b <temp_r+0x1>
 434:	40 91 0c 3e 	lds	r20, 0x3E0C	; 0x803e0c <temp_r+0x2>
 438:	50 91 0d 3e 	lds	r21, 0x3E0D	; 0x803e0d <temp_r+0x3>
 43c:	d6 d1       	rcall	.+940    	; 0x7ea <__addsf3>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	4f e7       	ldi	r20, 0x7F	; 127
 444:	53 e4       	ldi	r21, 0x43	; 67
 446:	fc d3       	rcall	.+2040   	; 0xc40 <__mulsf3>
 448:	60 93 0a 3e 	sts	0x3E0A, r22	; 0x803e0a <temp_r>
 44c:	70 93 0b 3e 	sts	0x3E0B, r23	; 0x803e0b <temp_r+0x1>
 450:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <temp_r+0x2>
 454:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <temp_r+0x3>
	temp_g = (temp_g + m) * 255;
 458:	20 91 06 3e 	lds	r18, 0x3E06	; 0x803e06 <temp_g>
 45c:	30 91 07 3e 	lds	r19, 0x3E07	; 0x803e07 <temp_g+0x1>
 460:	40 91 08 3e 	lds	r20, 0x3E08	; 0x803e08 <temp_g+0x2>
 464:	50 91 09 3e 	lds	r21, 0x3E09	; 0x803e09 <temp_g+0x3>
 468:	c7 01       	movw	r24, r14
 46a:	b6 01       	movw	r22, r12
 46c:	be d1       	rcall	.+892    	; 0x7ea <__addsf3>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	4f e7       	ldi	r20, 0x7F	; 127
 474:	53 e4       	ldi	r21, 0x43	; 67
 476:	e4 d3       	rcall	.+1992   	; 0xc40 <__mulsf3>
 478:	60 93 06 3e 	sts	0x3E06, r22	; 0x803e06 <temp_g>
 47c:	70 93 07 3e 	sts	0x3E07, r23	; 0x803e07 <temp_g+0x1>
 480:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <temp_g+0x2>
 484:	90 93 09 3e 	sts	0x3E09, r25	; 0x803e09 <temp_g+0x3>
	temp_b = (temp_b + m) * 255;
 488:	20 91 02 3e 	lds	r18, 0x3E02	; 0x803e02 <__data_end>
 48c:	30 91 03 3e 	lds	r19, 0x3E03	; 0x803e03 <__data_end+0x1>
 490:	40 91 04 3e 	lds	r20, 0x3E04	; 0x803e04 <__data_end+0x2>
 494:	50 91 05 3e 	lds	r21, 0x3E05	; 0x803e05 <__data_end+0x3>
 498:	c7 01       	movw	r24, r14
 49a:	b6 01       	movw	r22, r12
 49c:	a6 d1       	rcall	.+844    	; 0x7ea <__addsf3>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	4f e7       	ldi	r20, 0x7F	; 127
 4a4:	53 e4       	ldi	r21, 0x43	; 67
 4a6:	cc d3       	rcall	.+1944   	; 0xc40 <__mulsf3>
 4a8:	60 93 02 3e 	sts	0x3E02, r22	; 0x803e02 <__data_end>
 4ac:	70 93 03 3e 	sts	0x3E03, r23	; 0x803e03 <__data_end+0x1>
 4b0:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end+0x2>
 4b4:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x3>
 4b8:	24 96       	adiw	r28, 0x04	; 4
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	cf 90       	pop	r12
 4ce:	bf 90       	pop	r11
 4d0:	af 90       	pop	r10
 4d2:	9f 90       	pop	r9
 4d4:	8f 90       	pop	r8
 4d6:	7f 90       	pop	r7
 4d8:	6f 90       	pop	r6
 4da:	5f 90       	pop	r5
 4dc:	4f 90       	pop	r4
 4de:	08 95       	ret

000004e0 <_Z14read_set_levelv>:
}


//read and update led level indicator
void read_set_level()
{
 4e0:	4f 92       	push	r4
 4e2:	5f 92       	push	r5
 4e4:	6f 92       	push	r6
 4e6:	7f 92       	push	r7
 4e8:	8f 92       	push	r8
 4ea:	9f 92       	push	r9
 4ec:	af 92       	push	r10
 4ee:	bf 92       	push	r11
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	25 97       	sbiw	r28, 0x05	; 5
 506:	cd bf       	out	0x3d, r28	; 61
 508:	de bf       	out	0x3e, r29	; 62
	//set colour and number of LEDs to light up
	volatile uint8_t number_to_light = 0;
 50a:	19 82       	std	Y+1, r1	; 0x01
	volatile float hue = 0;
 50c:	1a 82       	std	Y+2, r1	; 0x02
 50e:	1b 82       	std	Y+3, r1	; 0x03
 510:	1c 82       	std	Y+4, r1	; 0x04
 512:	1d 82       	std	Y+5, r1	; 0x05

	//read level pots 10bit = 1024
	//the low level pot sets the value when fill is zero and the high level similar
	//scale pressure value by trim pots to give a 0 to 1 value
	float scaled_level = (float(pressure_value) - float(low_level_value)) / (float(high_level_value) - float(low_level_value));
 514:	60 91 21 3e 	lds	r22, 0x3E21	; 0x803e21 <pressure_value>
 518:	70 91 22 3e 	lds	r23, 0x3E22	; 0x803e22 <pressure_value+0x1>
 51c:	a0 90 25 3e 	lds	r10, 0x3E25	; 0x803e25 <low_level_value>
 520:	b0 90 26 3e 	lds	r11, 0x3E26	; 0x803e26 <low_level_value+0x1>
 524:	c0 90 23 3e 	lds	r12, 0x3E23	; 0x803e23 <high_level_value>
 528:	d0 90 24 3e 	lds	r13, 0x3E24	; 0x803e24 <high_level_value+0x1>
 52c:	e0 90 25 3e 	lds	r14, 0x3E25	; 0x803e25 <low_level_value>
 530:	f0 90 26 3e 	lds	r15, 0x3E26	; 0x803e26 <low_level_value+0x1>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	6a d2       	rcall	.+1236   	; 0xa0e <__floatunsisf>
 53a:	2b 01       	movw	r4, r22
 53c:	3c 01       	movw	r6, r24
 53e:	b5 01       	movw	r22, r10
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	64 d2       	rcall	.+1224   	; 0xa0e <__floatunsisf>
 546:	9b 01       	movw	r18, r22
 548:	ac 01       	movw	r20, r24
 54a:	c3 01       	movw	r24, r6
 54c:	b2 01       	movw	r22, r4
 54e:	4c d1       	rcall	.+664    	; 0x7e8 <__subsf3>
 550:	4b 01       	movw	r8, r22
 552:	5c 01       	movw	r10, r24
 554:	b6 01       	movw	r22, r12
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	59 d2       	rcall	.+1202   	; 0xa0e <__floatunsisf>
 55c:	2b 01       	movw	r4, r22
 55e:	3c 01       	movw	r6, r24
 560:	b7 01       	movw	r22, r14
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	53 d2       	rcall	.+1190   	; 0xa0e <__floatunsisf>
 568:	9b 01       	movw	r18, r22
 56a:	ac 01       	movw	r20, r24
 56c:	c3 01       	movw	r24, r6
 56e:	b2 01       	movw	r22, r4
 570:	3b d1       	rcall	.+630    	; 0x7e8 <__subsf3>
 572:	9b 01       	movw	r18, r22
 574:	ac 01       	movw	r20, r24
 576:	c5 01       	movw	r24, r10
 578:	b4 01       	movw	r22, r8
 57a:	a8 d1       	rcall	.+848    	; 0x8cc <__divsf3>
 57c:	6b 01       	movw	r12, r22
 57e:	7c 01       	movw	r14, r24

	//check for valid data
	if (isnan(scaled_level) == 1)
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	ca d3       	rcall	.+1940   	; 0xd1a <__unordsf2>
 586:	81 11       	cpse	r24, r1
 588:	1c c0       	rjmp	.+56     	; 0x5c2 <_Z14read_set_levelv+0xe2>
		scaled_level = 0;
	}

	//calculate colour (hue)
	//hue; red = 0, yellow = 60, green = 120
	if (scaled_level > 0.9)
 58a:	26 e6       	ldi	r18, 0x66	; 102
 58c:	36 e6       	ldi	r19, 0x66	; 102
 58e:	46 e6       	ldi	r20, 0x66	; 102
 590:	5f e3       	ldi	r21, 0x3F	; 63
 592:	c7 01       	movw	r24, r14
 594:	b6 01       	movw	r22, r12
 596:	4f d3       	rcall	.+1694   	; 0xc36 <__gesf2>
 598:	18 16       	cp	r1, r24
 59a:	54 f4       	brge	.+20     	; 0x5b0 <_Z14read_set_levelv+0xd0>
	{
		//if pressure too high, then change to blue to indicate overflow or blocked vent
		hue = 240;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	a0 e7       	ldi	r26, 0x70	; 112
 5a2:	b3 e4       	ldi	r27, 0x43	; 67
 5a4:	8a 83       	std	Y+2, r24	; 0x02
 5a6:	9b 83       	std	Y+3, r25	; 0x03
 5a8:	ac 83       	std	Y+4, r26	; 0x04
 5aa:	bd 83       	std	Y+5, r27	; 0x05
		number_to_light = no_leds;
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	89 83       	std	Y+1, r24	; 0x01
	} 
	if (scaled_level <= 0) //pressure below zero level set to purple
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	a9 01       	movw	r20, r18
 5b6:	c7 01       	movw	r24, r14
 5b8:	b6 01       	movw	r22, r12
 5ba:	83 d1       	rcall	.+774    	; 0x8c2 <__cmpsf2>
 5bc:	18 16       	cp	r1, r24
 5be:	74 f0       	brlt	.+28     	; 0x5dc <_Z14read_set_levelv+0xfc>
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <_Z14read_set_levelv+0xe8>
	float scaled_level = (float(pressure_value) - float(low_level_value)) / (float(high_level_value) - float(low_level_value));

	//check for valid data
	if (isnan(scaled_level) == 1)
	{
		scaled_level = 0;
 5c2:	c1 2c       	mov	r12, r1
 5c4:	d1 2c       	mov	r13, r1
 5c6:	76 01       	movw	r14, r12
		hue = 240;
		number_to_light = no_leds;
	} 
	if (scaled_level <= 0) //pressure below zero level set to purple
	{
		hue = 355;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e8       	ldi	r25, 0x80	; 128
 5cc:	a1 eb       	ldi	r26, 0xB1	; 177
 5ce:	b3 e4       	ldi	r27, 0x43	; 67
 5d0:	8a 83       	std	Y+2, r24	; 0x02
 5d2:	9b 83       	std	Y+3, r25	; 0x03
 5d4:	ac 83       	std	Y+4, r26	; 0x04
 5d6:	bd 83       	std	Y+5, r27	; 0x05
		number_to_light = no_leds;
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	89 83       	std	Y+1, r24	; 0x01
	}
	if((scaled_level > 0) && (scaled_level <= 0.9)) //in set range, run from red to green
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	a9 01       	movw	r20, r18
 5e2:	c7 01       	movw	r24, r14
 5e4:	b6 01       	movw	r22, r12
 5e6:	27 d3       	rcall	.+1614   	; 0xc36 <__gesf2>
 5e8:	18 16       	cp	r1, r24
 5ea:	f4 f4       	brge	.+60     	; 0x628 <_Z14read_set_levelv+0x148>
 5ec:	26 e6       	ldi	r18, 0x66	; 102
 5ee:	36 e6       	ldi	r19, 0x66	; 102
 5f0:	46 e6       	ldi	r20, 0x66	; 102
 5f2:	5f e3       	ldi	r21, 0x3F	; 63
 5f4:	c7 01       	movw	r24, r14
 5f6:	b6 01       	movw	r22, r12
 5f8:	64 d1       	rcall	.+712    	; 0x8c2 <__cmpsf2>
 5fa:	18 16       	cp	r1, r24
 5fc:	ac f0       	brlt	.+42     	; 0x628 <_Z14read_set_levelv+0x148>
	{	
		hue = scaled_level * 120;
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	40 ef       	ldi	r20, 0xF0	; 240
 604:	52 e4       	ldi	r21, 0x42	; 66
 606:	c7 01       	movw	r24, r14
 608:	b6 01       	movw	r22, r12
 60a:	1a d3       	rcall	.+1588   	; 0xc40 <__mulsf3>
 60c:	6a 83       	std	Y+2, r22	; 0x02
 60e:	7b 83       	std	Y+3, r23	; 0x03
 610:	8c 83       	std	Y+4, r24	; 0x04
 612:	9d 83       	std	Y+5, r25	; 0x05
		number_to_light = uint8_t(scaled_level * no_leds) + 1;
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	40 ec       	ldi	r20, 0xC0	; 192
 61a:	50 e4       	ldi	r21, 0x40	; 64
 61c:	c7 01       	movw	r24, r14
 61e:	b6 01       	movw	r22, r12
 620:	0f d3       	rcall	.+1566   	; 0xc40 <__mulsf3>
 622:	c6 d1       	rcall	.+908    	; 0x9b0 <__fixunssfsi>
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	69 83       	std	Y+1, r22	; 0x01
	}


	//convert HSL to RGB values
	convert_hsl_rgb(hue, 1, float(max_brightness) / 255);
 628:	8a 80       	ldd	r8, Y+2	; 0x02
 62a:	9b 80       	ldd	r9, Y+3	; 0x03
 62c:	ac 80       	ldd	r10, Y+4	; 0x04
 62e:	bd 80       	ldd	r11, Y+5	; 0x05
 630:	60 91 00 3e 	lds	r22, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	e9 d1       	rcall	.+978    	; 0xa0e <__floatunsisf>
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	4f e7       	ldi	r20, 0x7F	; 127
 642:	53 e4       	ldi	r21, 0x43	; 67
 644:	43 d1       	rcall	.+646    	; 0x8cc <__divsf3>
 646:	7b 01       	movw	r14, r22
 648:	8c 01       	movw	r16, r24
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	40 e8       	ldi	r20, 0x80	; 128
 650:	5f e3       	ldi	r21, 0x3F	; 63
 652:	c5 01       	movw	r24, r10
 654:	b4 01       	movw	r22, r8
 656:	8e dd       	rcall	.-1252   	; 0x174 <_Z15convert_hsl_rgbfff>
	//set leds
	for (uint8_t i = 0; i < no_leds; i++)
	{
		if (i < number_to_light)
		{
			leds[i].r = temp_r;
 658:	60 91 0a 3e 	lds	r22, 0x3E0A	; 0x803e0a <temp_r>
 65c:	70 91 0b 3e 	lds	r23, 0x3E0B	; 0x803e0b <temp_r+0x1>
 660:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <temp_r+0x2>
 664:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <temp_r+0x3>
 668:	a3 d1       	rcall	.+838    	; 0x9b0 <__fixunssfsi>
 66a:	e6 2e       	mov	r14, r22
			leds[i].g = temp_g;
 66c:	60 91 06 3e 	lds	r22, 0x3E06	; 0x803e06 <temp_g>
 670:	70 91 07 3e 	lds	r23, 0x3E07	; 0x803e07 <temp_g+0x1>
 674:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <temp_g+0x2>
 678:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <temp_g+0x3>
 67c:	99 d1       	rcall	.+818    	; 0x9b0 <__fixunssfsi>
 67e:	f6 2e       	mov	r15, r22
			leds[i].b = temp_b;
 680:	60 91 02 3e 	lds	r22, 0x3E02	; 0x803e02 <__data_end>
 684:	70 91 03 3e 	lds	r23, 0x3E03	; 0x803e03 <__data_end+0x1>
 688:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end+0x2>
 68c:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <__data_end+0x3>
 690:	8f d1       	rcall	.+798    	; 0x9b0 <__fixunssfsi>
 692:	ee e0       	ldi	r30, 0x0E	; 14
 694:	fe e3       	ldi	r31, 0x3E	; 62

	//convert HSL to RGB values
	convert_hsl_rgb(hue, 1, float(max_brightness) / 255);

	//set leds
	for (uint8_t i = 0; i < no_leds; i++)
 696:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (i < number_to_light)
 698:	99 81       	ldd	r25, Y+1	; 0x01
 69a:	89 17       	cp	r24, r25
 69c:	20 f4       	brcc	.+8      	; 0x6a6 <_Z14read_set_levelv+0x1c6>
		{
			leds[i].r = temp_r;
 69e:	e1 82       	std	Z+1, r14	; 0x01
			leds[i].g = temp_g;
 6a0:	f0 82       	st	Z, r15
			leds[i].b = temp_b;
 6a2:	62 83       	std	Z+2, r22	; 0x02
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <_Z14read_set_levelv+0x1cc>
		} 
		else
		{
			leds[i].r = 0;
 6a6:	11 82       	std	Z+1, r1	; 0x01
			leds[i].g = 0;
 6a8:	10 82       	st	Z, r1
			leds[i].b = 0;
 6aa:	12 82       	std	Z+2, r1	; 0x02

	//convert HSL to RGB values
	convert_hsl_rgb(hue, 1, float(max_brightness) / 255);

	//set leds
	for (uint8_t i = 0; i < no_leds; i++)
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	33 96       	adiw	r30, 0x03	; 3
 6b0:	86 30       	cpi	r24, 0x06	; 6
 6b2:	91 f7       	brne	.-28     	; 0x698 <_Z14read_set_levelv+0x1b8>
			leds[i].b = 0;
		}
	}
	
	//send to LEDs
	send();
 6b4:	40 dd       	rcall	.-1408   	; 0x136 <_Z4sendv>
}
 6b6:	25 96       	adiw	r28, 0x05	; 5
 6b8:	cd bf       	out	0x3d, r28	; 61
 6ba:	de bf       	out	0x3e, r29	; 62
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	bf 90       	pop	r11
 6ce:	af 90       	pop	r10
 6d0:	9f 90       	pop	r9
 6d2:	8f 90       	pop	r8
 6d4:	7f 90       	pop	r7
 6d6:	6f 90       	pop	r6
 6d8:	5f 90       	pop	r5
 6da:	4f 90       	pop	r4
 6dc:	08 95       	ret

000006de <main>:


int main(void)
{
	//init functions
	cpu_clock_init();
 6de:	ff dc       	rcall	.-1538   	; 0xde <_Z14cpu_clock_initv>
	init_ADC();
 6e0:	05 dd       	rcall	.-1526   	; 0xec <_Z8init_ADCv>

	//setup pins
	init_pins();
 6e2:	1a dd       	rcall	.-1484   	; 0x118 <_Z9init_pinsv>
		
		//update if changed
		if (temp_read != low_level_value)
		{
			low_level_value = temp_read;
			flag_update = 1;
 6e4:	11 e0       	ldi	r17, 0x01	; 1

    while (1) 
    {
		
		//read low level pot
		uint16_t temp_read = ((low_level_value * 9) + get_adc(low_level_pot_mux_pos)) / 10;
 6e6:	c0 91 25 3e 	lds	r28, 0x3E25	; 0x803e25 <low_level_value>
 6ea:	d0 91 26 3e 	lds	r29, 0x3E26	; 0x803e26 <low_level_value+0x1>
 6ee:	8a e0       	ldi	r24, 0x0A	; 10
 6f0:	28 dd       	rcall	.-1456   	; 0x142 <_Z7get_adch>
 6f2:	9e 01       	movw	r18, r28
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	22 0f       	add	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	22 0f       	add	r18, r18
 6fe:	33 1f       	adc	r19, r19
 700:	c2 0f       	add	r28, r18
 702:	d3 1f       	adc	r29, r19
 704:	9e 01       	movw	r18, r28
 706:	28 0f       	add	r18, r24
 708:	39 1f       	adc	r19, r25
 70a:	ad ec       	ldi	r26, 0xCD	; 205
 70c:	bc ec       	ldi	r27, 0xCC	; 204
 70e:	0a d3       	rcall	.+1556   	; 0xd24 <__umulhisi3>
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	96 95       	lsr	r25
 71a:	87 95       	ror	r24
		
		//update if changed
		if (temp_read != low_level_value)
 71c:	20 91 25 3e 	lds	r18, 0x3E25	; 0x803e25 <low_level_value>
 720:	30 91 26 3e 	lds	r19, 0x3E26	; 0x803e26 <low_level_value+0x1>
 724:	82 17       	cp	r24, r18
 726:	93 07       	cpc	r25, r19
 728:	31 f0       	breq	.+12     	; 0x736 <main+0x58>
		{
			low_level_value = temp_read;
 72a:	80 93 25 3e 	sts	0x3E25, r24	; 0x803e25 <low_level_value>
 72e:	90 93 26 3e 	sts	0x3E26, r25	; 0x803e26 <low_level_value+0x1>
			flag_update = 1;
 732:	10 93 20 3e 	sts	0x3E20, r17	; 0x803e20 <flag_update>
		}
		

		//read high level pot
		temp_read = ((high_level_value * 9) + get_adc(high_level_pot_mux_pos)) / 10;
 736:	c0 91 23 3e 	lds	r28, 0x3E23	; 0x803e23 <high_level_value>
 73a:	d0 91 24 3e 	lds	r29, 0x3E24	; 0x803e24 <high_level_value+0x1>
 73e:	8b e0       	ldi	r24, 0x0B	; 11
 740:	00 dd       	rcall	.-1536   	; 0x142 <_Z7get_adch>
 742:	9e 01       	movw	r18, r28
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	22 0f       	add	r18, r18
 74a:	33 1f       	adc	r19, r19
 74c:	22 0f       	add	r18, r18
 74e:	33 1f       	adc	r19, r19
 750:	c2 0f       	add	r28, r18
 752:	d3 1f       	adc	r29, r19
 754:	9e 01       	movw	r18, r28
 756:	28 0f       	add	r18, r24
 758:	39 1f       	adc	r19, r25
 75a:	ad ec       	ldi	r26, 0xCD	; 205
 75c:	bc ec       	ldi	r27, 0xCC	; 204
 75e:	e2 d2       	rcall	.+1476   	; 0xd24 <__umulhisi3>
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	96 95       	lsr	r25
 766:	87 95       	ror	r24
 768:	96 95       	lsr	r25
 76a:	87 95       	ror	r24
		
		//update if changed
		if (temp_read != high_level_value)
 76c:	20 91 23 3e 	lds	r18, 0x3E23	; 0x803e23 <high_level_value>
 770:	30 91 24 3e 	lds	r19, 0x3E24	; 0x803e24 <high_level_value+0x1>
 774:	82 17       	cp	r24, r18
 776:	93 07       	cpc	r25, r19
 778:	31 f0       	breq	.+12     	; 0x786 <main+0xa8>
		{
			high_level_value = temp_read;
 77a:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <high_level_value>
 77e:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <high_level_value+0x1>
			flag_update = 1;
 782:	10 93 20 3e 	sts	0x3E20, r17	; 0x803e20 <flag_update>
		}


		//read pressure sensor
		temp_read = ((pressure_value * 9) + (get_adc(pressure_sensor_mux_pos))) / 10;
 786:	c0 91 21 3e 	lds	r28, 0x3E21	; 0x803e21 <pressure_value>
 78a:	d0 91 22 3e 	lds	r29, 0x3E22	; 0x803e22 <pressure_value+0x1>
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	d8 dc       	rcall	.-1616   	; 0x142 <_Z7get_adch>
 792:	9e 01       	movw	r18, r28
 794:	22 0f       	add	r18, r18
 796:	33 1f       	adc	r19, r19
 798:	22 0f       	add	r18, r18
 79a:	33 1f       	adc	r19, r19
 79c:	22 0f       	add	r18, r18
 79e:	33 1f       	adc	r19, r19
 7a0:	c2 0f       	add	r28, r18
 7a2:	d3 1f       	adc	r29, r19
 7a4:	9e 01       	movw	r18, r28
 7a6:	28 0f       	add	r18, r24
 7a8:	39 1f       	adc	r19, r25
 7aa:	ad ec       	ldi	r26, 0xCD	; 205
 7ac:	bc ec       	ldi	r27, 0xCC	; 204
 7ae:	ba d2       	rcall	.+1396   	; 0xd24 <__umulhisi3>
 7b0:	96 95       	lsr	r25
 7b2:	87 95       	ror	r24
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
		
		//update if changed
		if (temp_read != pressure_value)
 7bc:	20 91 21 3e 	lds	r18, 0x3E21	; 0x803e21 <pressure_value>
 7c0:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <pressure_value+0x1>
 7c4:	82 17       	cp	r24, r18
 7c6:	93 07       	cpc	r25, r19
 7c8:	31 f0       	breq	.+12     	; 0x7d6 <main+0xf8>
		{
			pressure_value = temp_read;
 7ca:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <pressure_value>
 7ce:	90 93 22 3e 	sts	0x3E22, r25	; 0x803e22 <pressure_value+0x1>
			flag_update = 1;
 7d2:	10 93 20 3e 	sts	0x3E20, r17	; 0x803e20 <flag_update>
		}
		
		//update if change
		if (flag_update != 0)
 7d6:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <flag_update>
 7da:	88 23       	and	r24, r24
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <main+0x102>
 7de:	83 cf       	rjmp	.-250    	; 0x6e6 <main+0x8>
		{
			read_set_level();
 7e0:	7f de       	rcall	.-770    	; 0x4e0 <_Z14read_set_levelv>
			flag_update = 0;
 7e2:	10 92 20 3e 	sts	0x3E20, r1	; 0x803e20 <flag_update>
 7e6:	7f cf       	rjmp	.-258    	; 0x6e6 <main+0x8>

000007e8 <__subsf3>:
 7e8:	50 58       	subi	r21, 0x80	; 128

000007ea <__addsf3>:
 7ea:	bb 27       	eor	r27, r27
 7ec:	aa 27       	eor	r26, r26
 7ee:	0e 94 0c 04 	call	0x818	; 0x818 <__addsf3x>
 7f2:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_round>
 7f6:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscA>
 7fa:	38 f0       	brcs	.+14     	; 0x80a <__addsf3+0x20>
 7fc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscB>
 800:	20 f0       	brcs	.+8      	; 0x80a <__addsf3+0x20>
 802:	39 f4       	brne	.+14     	; 0x812 <__addsf3+0x28>
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	19 f4       	brne	.+6      	; 0x80e <__addsf3+0x24>
 808:	26 f4       	brtc	.+8      	; 0x812 <__addsf3+0x28>
 80a:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_nan>
 80e:	0e f4       	brtc	.+2      	; 0x812 <__addsf3+0x28>
 810:	e0 95       	com	r30
 812:	e7 fb       	bst	r30, 7
 814:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_inf>

00000818 <__addsf3x>:
 818:	e9 2f       	mov	r30, r25
 81a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_split3>
 81e:	58 f3       	brcs	.-42     	; 0x7f6 <__addsf3+0xc>
 820:	ba 17       	cp	r27, r26
 822:	62 07       	cpc	r22, r18
 824:	73 07       	cpc	r23, r19
 826:	84 07       	cpc	r24, r20
 828:	95 07       	cpc	r25, r21
 82a:	20 f0       	brcs	.+8      	; 0x834 <__addsf3x+0x1c>
 82c:	79 f4       	brne	.+30     	; 0x84c <__addsf3x+0x34>
 82e:	a6 f5       	brtc	.+104    	; 0x898 <__addsf3x+0x80>
 830:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_zero>
 834:	0e f4       	brtc	.+2      	; 0x838 <__addsf3x+0x20>
 836:	e0 95       	com	r30
 838:	0b 2e       	mov	r0, r27
 83a:	ba 2f       	mov	r27, r26
 83c:	a0 2d       	mov	r26, r0
 83e:	0b 01       	movw	r0, r22
 840:	b9 01       	movw	r22, r18
 842:	90 01       	movw	r18, r0
 844:	0c 01       	movw	r0, r24
 846:	ca 01       	movw	r24, r20
 848:	a0 01       	movw	r20, r0
 84a:	11 24       	eor	r1, r1
 84c:	ff 27       	eor	r31, r31
 84e:	59 1b       	sub	r21, r25
 850:	99 f0       	breq	.+38     	; 0x878 <__addsf3x+0x60>
 852:	59 3f       	cpi	r21, 0xF9	; 249
 854:	50 f4       	brcc	.+20     	; 0x86a <__addsf3x+0x52>
 856:	50 3e       	cpi	r21, 0xE0	; 224
 858:	68 f1       	brcs	.+90     	; 0x8b4 <__addsf3x+0x9c>
 85a:	1a 16       	cp	r1, r26
 85c:	f0 40       	sbci	r31, 0x00	; 0
 85e:	a2 2f       	mov	r26, r18
 860:	23 2f       	mov	r18, r19
 862:	34 2f       	mov	r19, r20
 864:	44 27       	eor	r20, r20
 866:	58 5f       	subi	r21, 0xF8	; 248
 868:	f3 cf       	rjmp	.-26     	; 0x850 <__addsf3x+0x38>
 86a:	46 95       	lsr	r20
 86c:	37 95       	ror	r19
 86e:	27 95       	ror	r18
 870:	a7 95       	ror	r26
 872:	f0 40       	sbci	r31, 0x00	; 0
 874:	53 95       	inc	r21
 876:	c9 f7       	brne	.-14     	; 0x86a <__addsf3x+0x52>
 878:	7e f4       	brtc	.+30     	; 0x898 <__addsf3x+0x80>
 87a:	1f 16       	cp	r1, r31
 87c:	ba 0b       	sbc	r27, r26
 87e:	62 0b       	sbc	r22, r18
 880:	73 0b       	sbc	r23, r19
 882:	84 0b       	sbc	r24, r20
 884:	ba f0       	brmi	.+46     	; 0x8b4 <__addsf3x+0x9c>
 886:	91 50       	subi	r25, 0x01	; 1
 888:	a1 f0       	breq	.+40     	; 0x8b2 <__addsf3x+0x9a>
 88a:	ff 0f       	add	r31, r31
 88c:	bb 1f       	adc	r27, r27
 88e:	66 1f       	adc	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	c2 f7       	brpl	.-16     	; 0x886 <__addsf3x+0x6e>
 896:	0e c0       	rjmp	.+28     	; 0x8b4 <__addsf3x+0x9c>
 898:	ba 0f       	add	r27, r26
 89a:	62 1f       	adc	r22, r18
 89c:	73 1f       	adc	r23, r19
 89e:	84 1f       	adc	r24, r20
 8a0:	48 f4       	brcc	.+18     	; 0x8b4 <__addsf3x+0x9c>
 8a2:	87 95       	ror	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f7 95       	ror	r31
 8ac:	9e 3f       	cpi	r25, 0xFE	; 254
 8ae:	08 f0       	brcs	.+2      	; 0x8b2 <__addsf3x+0x9a>
 8b0:	b0 cf       	rjmp	.-160    	; 0x812 <__addsf3+0x28>
 8b2:	93 95       	inc	r25
 8b4:	88 0f       	add	r24, r24
 8b6:	08 f0       	brcs	.+2      	; 0x8ba <__addsf3x+0xa2>
 8b8:	99 27       	eor	r25, r25
 8ba:	ee 0f       	add	r30, r30
 8bc:	97 95       	ror	r25
 8be:	87 95       	ror	r24
 8c0:	08 95       	ret

000008c2 <__cmpsf2>:
 8c2:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_cmp>
 8c6:	08 f4       	brcc	.+2      	; 0x8ca <__cmpsf2+0x8>
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	08 95       	ret

000008cc <__divsf3>:
 8cc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__divsf3x>
 8d0:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_round>
 8d4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscB>
 8d8:	58 f0       	brcs	.+22     	; 0x8f0 <__divsf3+0x24>
 8da:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscA>
 8de:	40 f0       	brcs	.+16     	; 0x8f0 <__divsf3+0x24>
 8e0:	29 f4       	brne	.+10     	; 0x8ec <__divsf3+0x20>
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	29 f0       	breq	.+10     	; 0x8f0 <__divsf3+0x24>
 8e6:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_inf>
 8ea:	51 11       	cpse	r21, r1
 8ec:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>
 8f0:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_nan>

000008f4 <__divsf3x>:
 8f4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_split3>
 8f8:	68 f3       	brcs	.-38     	; 0x8d4 <__divsf3+0x8>

000008fa <__divsf3_pse>:
 8fa:	99 23       	and	r25, r25
 8fc:	b1 f3       	breq	.-20     	; 0x8ea <__divsf3+0x1e>
 8fe:	55 23       	and	r21, r21
 900:	91 f3       	breq	.-28     	; 0x8e6 <__divsf3+0x1a>
 902:	95 1b       	sub	r25, r21
 904:	55 0b       	sbc	r21, r21
 906:	bb 27       	eor	r27, r27
 908:	aa 27       	eor	r26, r26
 90a:	62 17       	cp	r22, r18
 90c:	73 07       	cpc	r23, r19
 90e:	84 07       	cpc	r24, r20
 910:	38 f0       	brcs	.+14     	; 0x920 <__divsf3_pse+0x26>
 912:	9f 5f       	subi	r25, 0xFF	; 255
 914:	5f 4f       	sbci	r21, 0xFF	; 255
 916:	22 0f       	add	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	44 1f       	adc	r20, r20
 91c:	aa 1f       	adc	r26, r26
 91e:	a9 f3       	breq	.-22     	; 0x90a <__divsf3_pse+0x10>
 920:	35 d0       	rcall	.+106    	; 0x98c <__divsf3_pse+0x92>
 922:	0e 2e       	mov	r0, r30
 924:	3a f0       	brmi	.+14     	; 0x934 <__divsf3_pse+0x3a>
 926:	e0 e8       	ldi	r30, 0x80	; 128
 928:	32 d0       	rcall	.+100    	; 0x98e <__divsf3_pse+0x94>
 92a:	91 50       	subi	r25, 0x01	; 1
 92c:	50 40       	sbci	r21, 0x00	; 0
 92e:	e6 95       	lsr	r30
 930:	00 1c       	adc	r0, r0
 932:	ca f7       	brpl	.-14     	; 0x926 <__divsf3_pse+0x2c>
 934:	2b d0       	rcall	.+86     	; 0x98c <__divsf3_pse+0x92>
 936:	fe 2f       	mov	r31, r30
 938:	29 d0       	rcall	.+82     	; 0x98c <__divsf3_pse+0x92>
 93a:	66 0f       	add	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	bb 1f       	adc	r27, r27
 942:	26 17       	cp	r18, r22
 944:	37 07       	cpc	r19, r23
 946:	48 07       	cpc	r20, r24
 948:	ab 07       	cpc	r26, r27
 94a:	b0 e8       	ldi	r27, 0x80	; 128
 94c:	09 f0       	breq	.+2      	; 0x950 <__divsf3_pse+0x56>
 94e:	bb 0b       	sbc	r27, r27
 950:	80 2d       	mov	r24, r0
 952:	bf 01       	movw	r22, r30
 954:	ff 27       	eor	r31, r31
 956:	93 58       	subi	r25, 0x83	; 131
 958:	5f 4f       	sbci	r21, 0xFF	; 255
 95a:	3a f0       	brmi	.+14     	; 0x96a <__divsf3_pse+0x70>
 95c:	9e 3f       	cpi	r25, 0xFE	; 254
 95e:	51 05       	cpc	r21, r1
 960:	78 f0       	brcs	.+30     	; 0x980 <__divsf3_pse+0x86>
 962:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_inf>
 966:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>
 96a:	5f 3f       	cpi	r21, 0xFF	; 255
 96c:	e4 f3       	brlt	.-8      	; 0x966 <__divsf3_pse+0x6c>
 96e:	98 3e       	cpi	r25, 0xE8	; 232
 970:	d4 f3       	brlt	.-12     	; 0x966 <__divsf3_pse+0x6c>
 972:	86 95       	lsr	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b7 95       	ror	r27
 97a:	f7 95       	ror	r31
 97c:	9f 5f       	subi	r25, 0xFF	; 255
 97e:	c9 f7       	brne	.-14     	; 0x972 <__divsf3_pse+0x78>
 980:	88 0f       	add	r24, r24
 982:	91 1d       	adc	r25, r1
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret
 98c:	e1 e0       	ldi	r30, 0x01	; 1
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	bb 1f       	adc	r27, r27
 996:	62 17       	cp	r22, r18
 998:	73 07       	cpc	r23, r19
 99a:	84 07       	cpc	r24, r20
 99c:	ba 07       	cpc	r27, r26
 99e:	20 f0       	brcs	.+8      	; 0x9a8 <__divsf3_pse+0xae>
 9a0:	62 1b       	sub	r22, r18
 9a2:	73 0b       	sbc	r23, r19
 9a4:	84 0b       	sbc	r24, r20
 9a6:	ba 0b       	sbc	r27, r26
 9a8:	ee 1f       	adc	r30, r30
 9aa:	88 f7       	brcc	.-30     	; 0x98e <__divsf3_pse+0x94>
 9ac:	e0 95       	com	r30
 9ae:	08 95       	ret

000009b0 <__fixunssfsi>:
 9b0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_splitA>
 9b4:	88 f0       	brcs	.+34     	; 0x9d8 <__fixunssfsi+0x28>
 9b6:	9f 57       	subi	r25, 0x7F	; 127
 9b8:	98 f0       	brcs	.+38     	; 0x9e0 <__fixunssfsi+0x30>
 9ba:	b9 2f       	mov	r27, r25
 9bc:	99 27       	eor	r25, r25
 9be:	b7 51       	subi	r27, 0x17	; 23
 9c0:	b0 f0       	brcs	.+44     	; 0x9ee <__fixunssfsi+0x3e>
 9c2:	e1 f0       	breq	.+56     	; 0x9fc <__fixunssfsi+0x4c>
 9c4:	66 0f       	add	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	1a f0       	brmi	.+6      	; 0x9d4 <__fixunssfsi+0x24>
 9ce:	ba 95       	dec	r27
 9d0:	c9 f7       	brne	.-14     	; 0x9c4 <__fixunssfsi+0x14>
 9d2:	14 c0       	rjmp	.+40     	; 0x9fc <__fixunssfsi+0x4c>
 9d4:	b1 30       	cpi	r27, 0x01	; 1
 9d6:	91 f0       	breq	.+36     	; 0x9fc <__fixunssfsi+0x4c>
 9d8:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_zero>
 9dc:	b1 e0       	ldi	r27, 0x01	; 1
 9de:	08 95       	ret
 9e0:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_zero>
 9e4:	67 2f       	mov	r22, r23
 9e6:	78 2f       	mov	r23, r24
 9e8:	88 27       	eor	r24, r24
 9ea:	b8 5f       	subi	r27, 0xF8	; 248
 9ec:	39 f0       	breq	.+14     	; 0x9fc <__fixunssfsi+0x4c>
 9ee:	b9 3f       	cpi	r27, 0xF9	; 249
 9f0:	cc f3       	brlt	.-14     	; 0x9e4 <__fixunssfsi+0x34>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b3 95       	inc	r27
 9fa:	d9 f7       	brne	.-10     	; 0x9f2 <__fixunssfsi+0x42>
 9fc:	3e f4       	brtc	.+14     	; 0xa0c <__fixunssfsi+0x5c>
 9fe:	90 95       	com	r25
 a00:	80 95       	com	r24
 a02:	70 95       	com	r23
 a04:	61 95       	neg	r22
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	08 95       	ret

00000a0e <__floatunsisf>:
 a0e:	e8 94       	clt
 a10:	09 c0       	rjmp	.+18     	; 0xa24 <__floatsisf+0x12>

00000a12 <__floatsisf>:
 a12:	97 fb       	bst	r25, 7
 a14:	3e f4       	brtc	.+14     	; 0xa24 <__floatsisf+0x12>
 a16:	90 95       	com	r25
 a18:	80 95       	com	r24
 a1a:	70 95       	com	r23
 a1c:	61 95       	neg	r22
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	8f 4f       	sbci	r24, 0xFF	; 255
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	99 23       	and	r25, r25
 a26:	a9 f0       	breq	.+42     	; 0xa52 <__floatsisf+0x40>
 a28:	f9 2f       	mov	r31, r25
 a2a:	96 e9       	ldi	r25, 0x96	; 150
 a2c:	bb 27       	eor	r27, r27
 a2e:	93 95       	inc	r25
 a30:	f6 95       	lsr	r31
 a32:	87 95       	ror	r24
 a34:	77 95       	ror	r23
 a36:	67 95       	ror	r22
 a38:	b7 95       	ror	r27
 a3a:	f1 11       	cpse	r31, r1
 a3c:	f8 cf       	rjmp	.-16     	; 0xa2e <__floatsisf+0x1c>
 a3e:	fa f4       	brpl	.+62     	; 0xa7e <__floatsisf+0x6c>
 a40:	bb 0f       	add	r27, r27
 a42:	11 f4       	brne	.+4      	; 0xa48 <__floatsisf+0x36>
 a44:	60 ff       	sbrs	r22, 0
 a46:	1b c0       	rjmp	.+54     	; 0xa7e <__floatsisf+0x6c>
 a48:	6f 5f       	subi	r22, 0xFF	; 255
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	16 c0       	rjmp	.+44     	; 0xa7e <__floatsisf+0x6c>
 a52:	88 23       	and	r24, r24
 a54:	11 f0       	breq	.+4      	; 0xa5a <__floatsisf+0x48>
 a56:	96 e9       	ldi	r25, 0x96	; 150
 a58:	11 c0       	rjmp	.+34     	; 0xa7c <__floatsisf+0x6a>
 a5a:	77 23       	and	r23, r23
 a5c:	21 f0       	breq	.+8      	; 0xa66 <__floatsisf+0x54>
 a5e:	9e e8       	ldi	r25, 0x8E	; 142
 a60:	87 2f       	mov	r24, r23
 a62:	76 2f       	mov	r23, r22
 a64:	05 c0       	rjmp	.+10     	; 0xa70 <__floatsisf+0x5e>
 a66:	66 23       	and	r22, r22
 a68:	71 f0       	breq	.+28     	; 0xa86 <__floatsisf+0x74>
 a6a:	96 e8       	ldi	r25, 0x86	; 134
 a6c:	86 2f       	mov	r24, r22
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	2a f0       	brmi	.+10     	; 0xa7e <__floatsisf+0x6c>
 a74:	9a 95       	dec	r25
 a76:	66 0f       	add	r22, r22
 a78:	77 1f       	adc	r23, r23
 a7a:	88 1f       	adc	r24, r24
 a7c:	da f7       	brpl	.-10     	; 0xa74 <__floatsisf+0x62>
 a7e:	88 0f       	add	r24, r24
 a80:	96 95       	lsr	r25
 a82:	87 95       	ror	r24
 a84:	97 f9       	bld	r25, 7
 a86:	08 95       	ret
 a88:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscA>
 a8c:	20 f0       	brcs	.+8      	; 0xa96 <__floatsisf+0x84>
 a8e:	19 f0       	breq	.+6      	; 0xa96 <__floatsisf+0x84>
 a90:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscB>
 a94:	50 f4       	brcc	.+20     	; 0xaaa <fmod+0xc>
 a96:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_nan>
 a9a:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>

00000a9e <fmod>:
 a9e:	e9 2f       	mov	r30, r25
 aa0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_split3>
 aa4:	88 f3       	brcs	.-30     	; 0xa88 <__floatsisf+0x76>
 aa6:	55 23       	and	r21, r21
 aa8:	b1 f3       	breq	.-20     	; 0xa96 <__floatsisf+0x84>
 aaa:	e7 fb       	bst	r30, 7
 aac:	62 17       	cp	r22, r18
 aae:	73 07       	cpc	r23, r19
 ab0:	84 07       	cpc	r24, r20
 ab2:	95 07       	cpc	r25, r21
 ab4:	a8 f1       	brcs	.+106    	; 0xb20 <fmod+0x82>
 ab6:	89 f3       	breq	.-30     	; 0xa9a <__floatsisf+0x88>
 ab8:	e9 2f       	mov	r30, r25
 aba:	ff 27       	eor	r31, r31
 abc:	88 23       	and	r24, r24
 abe:	2a f0       	brmi	.+10     	; 0xaca <fmod+0x2c>
 ac0:	31 97       	sbiw	r30, 0x01	; 1
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	da f7       	brpl	.-10     	; 0xac0 <fmod+0x22>
 aca:	95 2f       	mov	r25, r21
 acc:	55 27       	eor	r21, r21
 ace:	44 23       	and	r20, r20
 ad0:	32 f0       	brmi	.+12     	; 0xade <fmod+0x40>
 ad2:	91 50       	subi	r25, 0x01	; 1
 ad4:	50 40       	sbci	r21, 0x00	; 0
 ad6:	22 0f       	add	r18, r18
 ad8:	33 1f       	adc	r19, r19
 ada:	44 1f       	adc	r20, r20
 adc:	d2 f7       	brpl	.-12     	; 0xad2 <fmod+0x34>
 ade:	bb 27       	eor	r27, r27
 ae0:	e9 1b       	sub	r30, r25
 ae2:	f5 0b       	sbc	r31, r21
 ae4:	62 1b       	sub	r22, r18
 ae6:	73 0b       	sbc	r23, r19
 ae8:	84 0b       	sbc	r24, r20
 aea:	b1 09       	sbc	r27, r1
 aec:	b1 f2       	breq	.-84     	; 0xa9a <__floatsisf+0x88>
 aee:	22 f4       	brpl	.+8      	; 0xaf8 <fmod+0x5a>
 af0:	62 0f       	add	r22, r18
 af2:	73 1f       	adc	r23, r19
 af4:	84 1f       	adc	r24, r20
 af6:	b1 1d       	adc	r27, r1
 af8:	31 97       	sbiw	r30, 0x01	; 1
 afa:	2a f0       	brmi	.+10     	; 0xb06 <fmod+0x68>
 afc:	66 0f       	add	r22, r22
 afe:	77 1f       	adc	r23, r23
 b00:	88 1f       	adc	r24, r24
 b02:	bb 1f       	adc	r27, r27
 b04:	ef cf       	rjmp	.-34     	; 0xae4 <fmod+0x46>
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	62 f0       	brmi	.+24     	; 0xb24 <fmod+0x86>
 b0c:	41 f0       	breq	.+16     	; 0xb1e <fmod+0x80>
 b0e:	88 23       	and	r24, r24
 b10:	32 f0       	brmi	.+12     	; 0xb1e <fmod+0x80>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	91 50       	subi	r25, 0x01	; 1
 b1a:	50 40       	sbci	r21, 0x00	; 0
 b1c:	c1 f7       	brne	.-16     	; 0xb0e <fmod+0x70>
 b1e:	93 95       	inc	r25
 b20:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_mpack>
 b24:	86 95       	lsr	r24
 b26:	77 95       	ror	r23
 b28:	67 95       	ror	r22
 b2a:	9f 5f       	subi	r25, 0xFF	; 255
 b2c:	d9 f7       	brne	.-10     	; 0xb24 <fmod+0x86>
 b2e:	f7 cf       	rjmp	.-18     	; 0xb1e <fmod+0x80>

00000b30 <__fp_cmp>:
 b30:	99 0f       	add	r25, r25
 b32:	00 08       	sbc	r0, r0
 b34:	55 0f       	add	r21, r21
 b36:	aa 0b       	sbc	r26, r26
 b38:	e0 e8       	ldi	r30, 0x80	; 128
 b3a:	fe ef       	ldi	r31, 0xFE	; 254
 b3c:	16 16       	cp	r1, r22
 b3e:	17 06       	cpc	r1, r23
 b40:	e8 07       	cpc	r30, r24
 b42:	f9 07       	cpc	r31, r25
 b44:	c0 f0       	brcs	.+48     	; 0xb76 <__fp_cmp+0x46>
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	e4 07       	cpc	r30, r20
 b4c:	f5 07       	cpc	r31, r21
 b4e:	98 f0       	brcs	.+38     	; 0xb76 <__fp_cmp+0x46>
 b50:	62 1b       	sub	r22, r18
 b52:	73 0b       	sbc	r23, r19
 b54:	84 0b       	sbc	r24, r20
 b56:	95 0b       	sbc	r25, r21
 b58:	39 f4       	brne	.+14     	; 0xb68 <__fp_cmp+0x38>
 b5a:	0a 26       	eor	r0, r26
 b5c:	61 f0       	breq	.+24     	; 0xb76 <__fp_cmp+0x46>
 b5e:	23 2b       	or	r18, r19
 b60:	24 2b       	or	r18, r20
 b62:	25 2b       	or	r18, r21
 b64:	21 f4       	brne	.+8      	; 0xb6e <__fp_cmp+0x3e>
 b66:	08 95       	ret
 b68:	0a 26       	eor	r0, r26
 b6a:	09 f4       	brne	.+2      	; 0xb6e <__fp_cmp+0x3e>
 b6c:	a1 40       	sbci	r26, 0x01	; 1
 b6e:	a6 95       	lsr	r26
 b70:	8f ef       	ldi	r24, 0xFF	; 255
 b72:	81 1d       	adc	r24, r1
 b74:	81 1d       	adc	r24, r1
 b76:	08 95       	ret

00000b78 <__fp_inf>:
 b78:	97 f9       	bld	r25, 7
 b7a:	9f 67       	ori	r25, 0x7F	; 127
 b7c:	80 e8       	ldi	r24, 0x80	; 128
 b7e:	70 e0       	ldi	r23, 0x00	; 0
 b80:	60 e0       	ldi	r22, 0x00	; 0
 b82:	08 95       	ret

00000b84 <__fp_mpack>:
 b84:	9f 3f       	cpi	r25, 0xFF	; 255
 b86:	31 f0       	breq	.+12     	; 0xb94 <__fp_mpack_finite+0xc>

00000b88 <__fp_mpack_finite>:
 b88:	91 50       	subi	r25, 0x01	; 1
 b8a:	20 f4       	brcc	.+8      	; 0xb94 <__fp_mpack_finite+0xc>
 b8c:	87 95       	ror	r24
 b8e:	77 95       	ror	r23
 b90:	67 95       	ror	r22
 b92:	b7 95       	ror	r27
 b94:	88 0f       	add	r24, r24
 b96:	91 1d       	adc	r25, r1
 b98:	96 95       	lsr	r25
 b9a:	87 95       	ror	r24
 b9c:	97 f9       	bld	r25, 7
 b9e:	08 95       	ret

00000ba0 <__fp_nan>:
 ba0:	9f ef       	ldi	r25, 0xFF	; 255
 ba2:	80 ec       	ldi	r24, 0xC0	; 192
 ba4:	08 95       	ret

00000ba6 <__fp_pscA>:
 ba6:	00 24       	eor	r0, r0
 ba8:	0a 94       	dec	r0
 baa:	16 16       	cp	r1, r22
 bac:	17 06       	cpc	r1, r23
 bae:	18 06       	cpc	r1, r24
 bb0:	09 06       	cpc	r0, r25
 bb2:	08 95       	ret

00000bb4 <__fp_pscB>:
 bb4:	00 24       	eor	r0, r0
 bb6:	0a 94       	dec	r0
 bb8:	12 16       	cp	r1, r18
 bba:	13 06       	cpc	r1, r19
 bbc:	14 06       	cpc	r1, r20
 bbe:	05 06       	cpc	r0, r21
 bc0:	08 95       	ret

00000bc2 <__fp_round>:
 bc2:	09 2e       	mov	r0, r25
 bc4:	03 94       	inc	r0
 bc6:	00 0c       	add	r0, r0
 bc8:	11 f4       	brne	.+4      	; 0xbce <__fp_round+0xc>
 bca:	88 23       	and	r24, r24
 bcc:	52 f0       	brmi	.+20     	; 0xbe2 <__fp_round+0x20>
 bce:	bb 0f       	add	r27, r27
 bd0:	40 f4       	brcc	.+16     	; 0xbe2 <__fp_round+0x20>
 bd2:	bf 2b       	or	r27, r31
 bd4:	11 f4       	brne	.+4      	; 0xbda <__fp_round+0x18>
 bd6:	60 ff       	sbrs	r22, 0
 bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__fp_round+0x20>
 bda:	6f 5f       	subi	r22, 0xFF	; 255
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	08 95       	ret

00000be4 <__fp_split3>:
 be4:	57 fd       	sbrc	r21, 7
 be6:	90 58       	subi	r25, 0x80	; 128
 be8:	44 0f       	add	r20, r20
 bea:	55 1f       	adc	r21, r21
 bec:	59 f0       	breq	.+22     	; 0xc04 <__fp_splitA+0x10>
 bee:	5f 3f       	cpi	r21, 0xFF	; 255
 bf0:	71 f0       	breq	.+28     	; 0xc0e <__fp_splitA+0x1a>
 bf2:	47 95       	ror	r20

00000bf4 <__fp_splitA>:
 bf4:	88 0f       	add	r24, r24
 bf6:	97 fb       	bst	r25, 7
 bf8:	99 1f       	adc	r25, r25
 bfa:	61 f0       	breq	.+24     	; 0xc14 <__fp_splitA+0x20>
 bfc:	9f 3f       	cpi	r25, 0xFF	; 255
 bfe:	79 f0       	breq	.+30     	; 0xc1e <__fp_splitA+0x2a>
 c00:	87 95       	ror	r24
 c02:	08 95       	ret
 c04:	12 16       	cp	r1, r18
 c06:	13 06       	cpc	r1, r19
 c08:	14 06       	cpc	r1, r20
 c0a:	55 1f       	adc	r21, r21
 c0c:	f2 cf       	rjmp	.-28     	; 0xbf2 <__fp_split3+0xe>
 c0e:	46 95       	lsr	r20
 c10:	f1 df       	rcall	.-30     	; 0xbf4 <__fp_splitA>
 c12:	08 c0       	rjmp	.+16     	; 0xc24 <__fp_splitA+0x30>
 c14:	16 16       	cp	r1, r22
 c16:	17 06       	cpc	r1, r23
 c18:	18 06       	cpc	r1, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	f1 cf       	rjmp	.-30     	; 0xc00 <__fp_splitA+0xc>
 c1e:	86 95       	lsr	r24
 c20:	71 05       	cpc	r23, r1
 c22:	61 05       	cpc	r22, r1
 c24:	08 94       	sec
 c26:	08 95       	ret

00000c28 <__fp_zero>:
 c28:	e8 94       	clt

00000c2a <__fp_szero>:
 c2a:	bb 27       	eor	r27, r27
 c2c:	66 27       	eor	r22, r22
 c2e:	77 27       	eor	r23, r23
 c30:	cb 01       	movw	r24, r22
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret

00000c36 <__gesf2>:
 c36:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_cmp>
 c3a:	08 f4       	brcc	.+2      	; 0xc3e <__gesf2+0x8>
 c3c:	8f ef       	ldi	r24, 0xFF	; 255
 c3e:	08 95       	ret

00000c40 <__mulsf3>:
 c40:	0e 94 33 06 	call	0xc66	; 0xc66 <__mulsf3x>
 c44:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_round>
 c48:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscA>
 c4c:	38 f0       	brcs	.+14     	; 0xc5c <__mulsf3+0x1c>
 c4e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscB>
 c52:	20 f0       	brcs	.+8      	; 0xc5c <__mulsf3+0x1c>
 c54:	95 23       	and	r25, r21
 c56:	11 f0       	breq	.+4      	; 0xc5c <__mulsf3+0x1c>
 c58:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_inf>
 c5c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_nan>
 c60:	11 24       	eor	r1, r1
 c62:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>

00000c66 <__mulsf3x>:
 c66:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_split3>
 c6a:	70 f3       	brcs	.-36     	; 0xc48 <__mulsf3+0x8>

00000c6c <__mulsf3_pse>:
 c6c:	95 9f       	mul	r25, r21
 c6e:	c1 f3       	breq	.-16     	; 0xc60 <__mulsf3+0x20>
 c70:	95 0f       	add	r25, r21
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	55 1f       	adc	r21, r21
 c76:	62 9f       	mul	r22, r18
 c78:	f0 01       	movw	r30, r0
 c7a:	72 9f       	mul	r23, r18
 c7c:	bb 27       	eor	r27, r27
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	63 9f       	mul	r22, r19
 c84:	aa 27       	eor	r26, r26
 c86:	f0 0d       	add	r31, r0
 c88:	b1 1d       	adc	r27, r1
 c8a:	aa 1f       	adc	r26, r26
 c8c:	64 9f       	mul	r22, r20
 c8e:	66 27       	eor	r22, r22
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	66 1f       	adc	r22, r22
 c96:	82 9f       	mul	r24, r18
 c98:	22 27       	eor	r18, r18
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	73 9f       	mul	r23, r19
 ca2:	b0 0d       	add	r27, r0
 ca4:	a1 1d       	adc	r26, r1
 ca6:	62 1f       	adc	r22, r18
 ca8:	83 9f       	mul	r24, r19
 caa:	a0 0d       	add	r26, r0
 cac:	61 1d       	adc	r22, r1
 cae:	22 1f       	adc	r18, r18
 cb0:	74 9f       	mul	r23, r20
 cb2:	33 27       	eor	r19, r19
 cb4:	a0 0d       	add	r26, r0
 cb6:	61 1d       	adc	r22, r1
 cb8:	23 1f       	adc	r18, r19
 cba:	84 9f       	mul	r24, r20
 cbc:	60 0d       	add	r22, r0
 cbe:	21 1d       	adc	r18, r1
 cc0:	82 2f       	mov	r24, r18
 cc2:	76 2f       	mov	r23, r22
 cc4:	6a 2f       	mov	r22, r26
 cc6:	11 24       	eor	r1, r1
 cc8:	9f 57       	subi	r25, 0x7F	; 127
 cca:	50 40       	sbci	r21, 0x00	; 0
 ccc:	9a f0       	brmi	.+38     	; 0xcf4 <__mulsf3_pse+0x88>
 cce:	f1 f0       	breq	.+60     	; 0xd0c <__mulsf3_pse+0xa0>
 cd0:	88 23       	and	r24, r24
 cd2:	4a f0       	brmi	.+18     	; 0xce6 <__mulsf3_pse+0x7a>
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	bb 1f       	adc	r27, r27
 cda:	66 1f       	adc	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__mulsf3_pse+0x64>
 ce6:	9e 3f       	cpi	r25, 0xFE	; 254
 ce8:	51 05       	cpc	r21, r1
 cea:	80 f0       	brcs	.+32     	; 0xd0c <__mulsf3_pse+0xa0>
 cec:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_inf>
 cf0:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>
 cf4:	5f 3f       	cpi	r21, 0xFF	; 255
 cf6:	e4 f3       	brlt	.-8      	; 0xcf0 <__mulsf3_pse+0x84>
 cf8:	98 3e       	cpi	r25, 0xE8	; 232
 cfa:	d4 f3       	brlt	.-12     	; 0xcf0 <__mulsf3_pse+0x84>
 cfc:	86 95       	lsr	r24
 cfe:	77 95       	ror	r23
 d00:	67 95       	ror	r22
 d02:	b7 95       	ror	r27
 d04:	f7 95       	ror	r31
 d06:	e7 95       	ror	r30
 d08:	9f 5f       	subi	r25, 0xFF	; 255
 d0a:	c1 f7       	brne	.-16     	; 0xcfc <__mulsf3_pse+0x90>
 d0c:	fe 2b       	or	r31, r30
 d0e:	88 0f       	add	r24, r24
 d10:	91 1d       	adc	r25, r1
 d12:	96 95       	lsr	r25
 d14:	87 95       	ror	r24
 d16:	97 f9       	bld	r25, 7
 d18:	08 95       	ret

00000d1a <__unordsf2>:
 d1a:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_cmp>
 d1e:	88 0b       	sbc	r24, r24
 d20:	99 0b       	sbc	r25, r25
 d22:	08 95       	ret

00000d24 <__umulhisi3>:
 d24:	a2 9f       	mul	r26, r18
 d26:	b0 01       	movw	r22, r0
 d28:	b3 9f       	mul	r27, r19
 d2a:	c0 01       	movw	r24, r0
 d2c:	a3 9f       	mul	r26, r19
 d2e:	01 d0       	rcall	.+2      	; 0xd32 <__umulhisi3+0xe>
 d30:	b2 9f       	mul	r27, r18
 d32:	70 0d       	add	r23, r0
 d34:	81 1d       	adc	r24, r1
 d36:	11 24       	eor	r1, r1
 d38:	91 1d       	adc	r25, r1
 d3a:	08 95       	ret

00000d3c <_exit>:
 d3c:	f8 94       	cli

00000d3e <__stop_program>:
 d3e:	ff cf       	rjmp	.-2      	; 0xd3e <__stop_program>
